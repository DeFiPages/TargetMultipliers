{"mappings":"AACA,IAAMA,+BAGF,IAAIC,EAAiB,IAAIC,MADX,IACgCC,KAAK,aAmB9CC,WAwCIC,IACLC,MAAM,iEACDC,MAAK,SAAUC,GAIZ,OAHKA,EAASC,IACVC,QAAQC,MAAM,0CAEXH,EAASI,UAEnBL,MAAK,SAAUC,GACZ,IAAIK,EAAcC,KAAKC,MAAMP,GAC7BQ,OAAOC,QAAoBJ,GAAaK,SAAO,EAAA,CACvCC,MACAA,EAAMnB,kBAAkBkB,SAAQE,KAC5BA,GAAS,GACG,EACRA,EAAQ,EACHA,EAAQC,KACbD,EAAQC,IACZpB,EAAemB,uBAhDhBE,EAAaH,EAAeI,EAAM,MACrD,MAAMC,EAAO,CACTL,MAAOA,EACPM,QAAS,IAAIC,MAAQC,UAAYJ,GAErCK,aAAaC,QAAQP,EAAKR,KAAKgB,UAAUN,IAgDzCO,CAAc,iBAAkBjB,KAAKgB,UAAU7B,IAC/C+B,aAGKA,IACL,MAAMC,EAAS,CACXC,KAAM,MACNC,KAAM,CACFC,OAAQlC,MAAMmC,KAAK,CAAEC,OA3FnB,KA2FkC,CAAGC,EAAGC,IAAMA,EAAI,IACpDC,SAAU,CACN,CACIC,MAAO,yCACPC,gBAAiB,UACjBR,KAAMlC,MAMtB,IAAI2C,EAAIC,SAASC,eAAe,aAElB,IAAIC,MAAMH,EAAGX,IApF1B7B,EAAA4C,IAAAA,EAAe,KACL,YAAX,cADC5C,EAEM,QAAP,UAFCA,EAGW,aAAZ,eAHCA,EAIO,SAAR,WAJCA,EAKS,WAAV,aALCA,EAMK,OAAN,SANCA,EAOM,QAAP,UAgFJ6C,OAAOC,OAAM,KACT,IAAIC,WAtEe7B,GACnB,MAAM8B,EAAUxB,aAAayB,QAAQ/B,GAErC,IAAK8B,EACD,OAAO,KAEX,MAAM5B,EAAOV,KAAKC,MAAMqC,GAClBE,EAAM,IAAI5B,KAEhB,IACI,GAAI4B,EAAI3B,UAAYH,EAAKC,OAGrB,OADAG,aAAa2B,WAAWjC,GACjB,KAEb,MAAOX,GAEL,OADAiB,aAAa2B,WAAWjC,GACjB,KAEX,OAAOE,EAAKL,MAmDJqC,CAAc,kBAClBL,GACAlD,EAAiBa,KAAKC,MAAMoC,GAC5BnB,KAEA3B,MAnHLL,oBAAAA,kBAAiB","sources":["Documents/vscode/TargetMultipliers/src/index.ts"],"sourcesContent":["/// <reference path=\"chart.d.ts\" />\r\nmodule targetMultipliers {\r\n\r\n    const MaxTM = 57;\r\n    var tmDistribution = new Array<number>(MaxTM).fill(0);\r\n\r\n    interface Masternode {\r\n        \"ownerAuthAddress\": string,\r\n        \"operatorAuthAddress\": string,\r\n        \"rewardAddress\": string,\r\n        \"creationHeight\": number,\r\n        \"resignHeight\": number,\r\n        \"resignTx\": string,\r\n        \"banTx\": string,\r\n        \"state\": MasternodeState,\r\n        \"mintedBlocks\": number,\r\n        \"ownerIsMine\": boolean,\r\n        \"operatorIsMine\": boolean,\r\n        \"localMasternode\": boolean,\r\n        \"targetMultipliers\": number[],\r\n        \"timelock\": string\r\n    }\r\n\r\n    enum MasternodeState {\r\n        PRE_ENABLED = \"PRE_ENABLED\",\r\n        ENABLED = \"ENABLED\",\r\n        PRE_RESIGNED = \"PRE_RESIGNED\",\r\n        RESIGNED = \"RESIGNED\",\r\n        PRE_BANNED = \"PRE_BANNED\",\r\n        BANNED = \"BANNED\",\r\n        UNKNOWN = \"UNKNOWN\"\r\n    }\r\n\r\n    function setWithExpiry(key: string, value: string, ttl = 3600000) {\r\n        const item = {\r\n            value: value,\r\n            expiry: (new Date()).getTime() + ttl, //ttl in ms\r\n        }\r\n        localStorage.setItem(key, JSON.stringify(item))\r\n    }\r\n\r\n    function getWithExpiry(key: string) {\r\n        const itemStr = localStorage.getItem(key)\r\n        // if the item doesn't exist, return null\r\n        if (!itemStr) {\r\n            return null\r\n        }\r\n        const item = JSON.parse(itemStr)\r\n        const now = new Date()\r\n        // compare the expiry time of the item with the current time\r\n        try {\r\n            if (now.getTime() > item.expiry) {\r\n                // If the item is expired, delete the item from storage and return null\r\n                localStorage.removeItem(key)\r\n                return null\r\n            }\r\n        } catch (error) {\r\n            localStorage.removeItem(key)\r\n            return null\r\n        }\r\n        return item.value\r\n    }\r\n\r\n    function getTargetMultipliers() {\r\n        fetch('https://api.mydefichain.com/v1/listmasternodes/?state=Enabled')\r\n            .then(function (response) {\r\n                if (!response.ok) {\r\n                    console.error('HTTP error! status: ${response.status}');\r\n                }\r\n                return response.text();\r\n            })\r\n            .then(function (response) {\r\n                var masternodes = JSON.parse(response);\r\n                Object.entries<Masternode>(masternodes).forEach(                      \r\n                    ([, value]) => {\r\n                        value.targetMultipliers.forEach(index => {\r\n                            index -= 1;\r\n                            if (index < 0)\r\n                                index = 0;\r\n                            else if (index > MaxTM - 1)\r\n                                index = MaxTM - 1;\r\n                            tmDistribution[index]++;\r\n                        });\r\n                    });\r\n            }\r\n            );\r\n        setWithExpiry(\"tmDistribution\", JSON.stringify(tmDistribution));\r\n        setchart()\r\n    };\r\n\r\n    function setchart() {\r\n        const config = {\r\n            type: 'bar',\r\n            data: {\r\n                labels: Array.from({ length: MaxTM }, (_, i) => i + 1),\r\n                datasets: [\r\n                    {\r\n                        label: \"Distribution of the target multipliers\",\r\n                        backgroundColor: '#ff8000',\r\n                        data: tmDistribution\r\n                    }\r\n                ]\r\n            },\r\n        };\r\n\r\n        let e = document.getElementById('bar-chart');\r\n        //@ts-ignore\r\n        var myChart = new Chart(e, config);\r\n    }\r\n\r\n    window.onload = () => {\r\n        var s = getWithExpiry('tmDistribution');\r\n        if (s) {\r\n            tmDistribution = JSON.parse(s);\r\n            setchart();\r\n        } else {\r\n            getTargetMultipliers();\r\n        }\r\n    };\r\n\r\n}"],"names":["targetMultipliers","tmDistribution","Array","fill","MasternodeState","getTargetMultipliers","fetch","then","response","ok","console","error","text","masternodes","JSON","parse","Object","entries","forEach","value","index","MaxTM","key","ttl","item","expiry","Date","getTime","localStorage","setItem","stringify","setWithExpiry","setchart","config","type","data","labels","from","length","_","i","datasets","label","backgroundColor","e","document","getElementById","Chart","MasternodeState1","window","onload","s","itemStr","getItem","now","removeItem","getWithExpiry"],"version":3,"file":"index.a19db54f.js.map"}